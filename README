Methods to find metrics with prescribed curvature at vertices with reduced distortion.

Scripts:
py/script_optimize.py and py/script_sim.py are the main scripts to run the methods.

use `export OPENBLAS_NUM_THREADS=1` 

Sample script usage is as follows:
Conformal: python3 py/script_optimize.py -c -i <input_dir> -f <mesh_file>
Optimization: python3 py/script_optimize.py -i <input_dir> -f <mesh_file>
Interpolation: python3 py/script_optimize.py -s <num_steps> -i <input_dir> -f <mesh_file>
Simultaneous Optimization: python3 py/script_sim.py -i <input_dir> -f <mesh_file>

Additional command line arguments for the scripts can be found with the help flag

Jupyter Notebooks:
py/test_sim.py is a Jupyter Notebook with code to run the various methods.
py/alternative_methods.py is a Jupyter Notebook with code to compare other methods and view distortion energies.

Implementation Code:
Low level code is located in src/optimization/optimization.hh
Pybingings for the low level code are located in src/optimization/optimization_pybind.cpp
High level methods are located in py/conformal_impl/optimization.py

TODO
Pipeline:
Output Directory Structure

- Maybe edge maps into parameter or mesh representation instead of rebuilding

Figures:
As many figures rely on the same output, figures are generated in a two step process:
	1) Run the optimization method to generate lengths and log files
	2) Generate renderings, plots, and other figures
To simplify this process, we include a makefile to separately make and clear both output and figures

- For the metric coordinates, we replace lambdas with:
	- `metric_coords` for general metric coordinates (i.e. could be either Penner coordinates or length coordinates)
	- `penner_coords` when Penner coordinates are assumed
	- `log_length_coords` when log edge length coordinates are assumed
	- `length_coords` when edge length coordinates are assumed
	- `variable_` when the (non-redundant) variable edge lengths are used
	- `reduced_` when the reduced non-redundant edge lengths are used
	- `halfedge_` when the doubled halfedge coordinates are used
	- `E` denotes an edge in the embedded mesh
	- `V` denotes a vertex in the embedded mesh
	- `e` denotes an edge in the double mesh
	- `h` denotes a halfedge in the double mesh
	- `v` denotes a vertex in the double mesh