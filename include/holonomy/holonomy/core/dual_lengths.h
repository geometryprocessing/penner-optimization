#pragma once

#include "holonomy/core/common.h"

#include "util/spanning_tree.h"

namespace Penner {
namespace Holonomy {

/**
 * @brief Compute dual edge lengths using the DEC formulation with dual vertices at circumcenters.
 *
 * @param m: mesh with primal edge lengths
 * @return per-halfedge dual edge lengths
 */
std::vector<Scalar> compute_dual_edge_lengths(const Mesh<Scalar>& m);

/**
 * @brief Compute the edge weights for a primal tree given by the length of the root cycle
 * generated by adding an edge to a dual spanning tree (or 0 if the edge is in the spanning tree)
 *
 * @param m: underlying mesh
 * @param weights: weights on the dual mesh for loop lengths
 * @param dual_tree: spanning dual tree
 * @return per-halfedge dual loop length weights
 */
std::vector<Scalar> compute_dual_loop_length_weights(
    const Mesh<Scalar>& m,
    const std::vector<Scalar>& weights,
    const DualTree& dual_tree);

} // namespace Holonomy
} // namespace Penner
